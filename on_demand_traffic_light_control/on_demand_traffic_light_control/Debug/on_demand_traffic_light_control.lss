
on_demand_traffic_light_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000744  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000007b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  000007b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016dd  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008af  00000000  00000000  00002041  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd2  00000000  00000000  000028f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  000034c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053f  00000000  00000000  000036c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004f5  00000000  00000000  00003c07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000040fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4a 02 	call	0x494	; 0x494 <main>
  74:	0c 94 a0 03 	jmp	0x740	; 0x740 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_init>:


void APP_init(void)
{
	// Initializing Leds
	LED_init(PEDSTRAIN_LED_RED_PORT, PEDSTRAIN_LED_RED_PIN);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	0e 94 3b 02 	call	0x476	; 0x476 <LED_init>
	LED_init(PEDSTRAIN_LED_YELLOW_PORT, PEDSTRAIN_LED_YELLOW_PIN);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	0e 94 3b 02 	call	0x476	; 0x476 <LED_init>
	LED_init(PEDSTRAIN_LED_GREEN_PORT, PEDSTRAIN_LED_GREEN_PIN);
  8c:	62 e0       	ldi	r22, 0x02	; 2
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	0e 94 3b 02 	call	0x476	; 0x476 <LED_init>
	
	LED_init(CAR_LED_RED_PORT, CAR_LED_RED_PIN);
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 3b 02 	call	0x476	; 0x476 <LED_init>
	LED_init(CAR_LED_YELLOW_PORT, CAR_LED_YELLOW_PIN);
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	0e 94 3b 02 	call	0x476	; 0x476 <LED_init>
	LED_init(CAR_LED_GREEN_PORT, CAR_LED_GREEN_PIN);
  a4:	62 e0       	ldi	r22, 0x02	; 2
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	0e 94 3b 02 	call	0x476	; 0x476 <LED_init>
	
	// Initializing Button
	BUTTON_init(BUTTON_PORT, BUTTON_PIN);
  ac:	63 e0       	ldi	r22, 0x03	; 3
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	0e 94 37 02 	call	0x46e	; 0x46e <BUTTON_init>
	
	// Initializing Timer
	TIMER_init();
  b4:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <TIMER_init>
	
	/* Initializing interrupts */
	INTERRRUPT_init();
  b8:	0e 94 73 03 	call	0x6e6	; 0x6e6 <INTERRRUPT_init>
  bc:	08 95       	ret

000000be <APP_start>:
}

void APP_start(void)
{
/* ---------------------------------------------- STATE 1 ---------------------------------------------- */	
		current_state= 1; // CAR_LED_GREEN IS ON 
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		LED_on(PEDSTRAIN_LED_RED_PORT, PEDSTRAIN_LED_RED_PIN);
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	0e 94 3f 02 	call	0x47e	; 0x47e <LED_on>
		LED_on(CAR_LED_GREEN_PORT, CAR_LED_GREEN_PIN);
  ca:	62 e0       	ldi	r22, 0x02	; 2
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	0e 94 3f 02 	call	0x47e	; 0x47e <LED_on>
	
		for(index_i = 0; index_i < 20; index_i++)
  d2:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <index_i>
  d6:	09 c0       	rjmp	.+18     	; 0xea <APP_start+0x2c>
		{
			// If button is not pressed
			TIMER_start();
  d8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TIMER_start>
			TIMER_stop();
  dc:	0e 94 9e 03 	call	0x73c	; 0x73c <TIMER_stop>
/* ---------------------------------------------- STATE 1 ---------------------------------------------- */	
		current_state= 1; // CAR_LED_GREEN IS ON 
		LED_on(PEDSTRAIN_LED_RED_PORT, PEDSTRAIN_LED_RED_PIN);
		LED_on(CAR_LED_GREEN_PORT, CAR_LED_GREEN_PIN);
	
		for(index_i = 0; index_i < 20; index_i++)
  e0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <index_i>
  e4:	8f 5f       	subi	r24, 0xFF	; 255
  e6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <index_i>
  ea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <index_i>
  ee:	84 31       	cpi	r24, 0x14	; 20
  f0:	98 f3       	brcs	.-26     	; 0xd8 <APP_start+0x1a>
		{
			// If button is not pressed
			TIMER_start();
			TIMER_stop();
		}
		LED_off(CAR_LED_GREEN_PORT, CAR_LED_GREEN_PIN);
  f2:	62 e0       	ldi	r22, 0x02	; 2
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 43 02 	call	0x486	; 0x486 <LED_off>
	
/* ---------------------------------------------- STATE 2 ---------------------------------------------- */		
		current_state= 2; // CAR_LED_YELLOW IS ON
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		for(index_i = 0; index_i < 10; index_i++)
 100:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <index_i>
 104:	15 c0       	rjmp	.+42     	; 0x130 <APP_start+0x72>
		{

			// If button is not pressed
			LED_on(CAR_LED_YELLOW_PORT, CAR_LED_YELLOW_PIN);
 106:	61 e0       	ldi	r22, 0x01	; 1
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0e 94 3f 02 	call	0x47e	; 0x47e <LED_on>
			TIMER_start();
 10e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TIMER_start>
			TIMER_stop();
 112:	0e 94 9e 03 	call	0x73c	; 0x73c <TIMER_stop>
			LED_off(CAR_LED_YELLOW_PORT, CAR_LED_YELLOW_PIN);
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	0e 94 43 02 	call	0x486	; 0x486 <LED_off>
			TIMER_start();
 11e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TIMER_start>
			TIMER_stop();
 122:	0e 94 9e 03 	call	0x73c	; 0x73c <TIMER_stop>
		}
		LED_off(CAR_LED_GREEN_PORT, CAR_LED_GREEN_PIN);
	
/* ---------------------------------------------- STATE 2 ---------------------------------------------- */		
		current_state= 2; // CAR_LED_YELLOW IS ON
		for(index_i = 0; index_i < 10; index_i++)
 126:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <index_i>
 12a:	8f 5f       	subi	r24, 0xFF	; 255
 12c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <index_i>
 130:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <index_i>
 134:	8a 30       	cpi	r24, 0x0A	; 10
 136:	38 f3       	brcs	.-50     	; 0x106 <APP_start+0x48>
			TIMER_stop();
			LED_off(CAR_LED_YELLOW_PORT, CAR_LED_YELLOW_PIN);
			TIMER_start();
			TIMER_stop();
		}
		LED_off(CAR_LED_YELLOW_PORT, CAR_LED_YELLOW_PIN);
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 43 02 	call	0x486	; 0x486 <LED_off>
		LED_off(PEDSTRAIN_LED_RED_PORT, PEDSTRAIN_LED_RED_PIN);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	0e 94 43 02 	call	0x486	; 0x486 <LED_off>
		
/* ---------------------------------------------- STATE 3 ---------------------------------------------- */	
			current_state= 3; // CAR_LED_RED IS ON
 148:	83 e0       	ldi	r24, 0x03	; 3
 14a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			LED_on(PEDSTRAIN_LED_GREEN_PORT, PEDSTRAIN_LED_GREEN_PIN);
 14e:	62 e0       	ldi	r22, 0x02	; 2
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	0e 94 3f 02 	call	0x47e	; 0x47e <LED_on>
			LED_on(CAR_LED_RED_PORT, CAR_LED_RED_PIN);
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	0e 94 3f 02 	call	0x47e	; 0x47e <LED_on>
			for(index_i = 0; index_i < 20; index_i++)
 15e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <index_i>
 162:	09 c0       	rjmp	.+18     	; 0x176 <APP_start+0xb8>
			{	
				// If button is not pressed
				TIMER_start();
 164:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TIMER_start>
				TIMER_stop();
 168:	0e 94 9e 03 	call	0x73c	; 0x73c <TIMER_stop>
		
/* ---------------------------------------------- STATE 3 ---------------------------------------------- */	
			current_state= 3; // CAR_LED_RED IS ON
			LED_on(PEDSTRAIN_LED_GREEN_PORT, PEDSTRAIN_LED_GREEN_PIN);
			LED_on(CAR_LED_RED_PORT, CAR_LED_RED_PIN);
			for(index_i = 0; index_i < 20; index_i++)
 16c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <index_i>
 170:	8f 5f       	subi	r24, 0xFF	; 255
 172:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <index_i>
 176:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <index_i>
 17a:	84 31       	cpi	r24, 0x14	; 20
 17c:	98 f3       	brcs	.-26     	; 0x164 <APP_start+0xa6>
			{	
				// If button is not pressed
				TIMER_start();
				TIMER_stop();
			}
			LED_off(CAR_LED_RED_PORT, CAR_LED_RED_PIN);
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	0e 94 43 02 	call	0x486	; 0x486 <LED_off>
			

/* ---------------------------------------------- STATE 2 ---------------------------------------------- */		
			current_state= 2; // CAR_LED_YELLOW IS ON
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			for(index_i = 0; index_i < 10; index_i++)
 18c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <index_i>
 190:	15 c0       	rjmp	.+42     	; 0x1bc <APP_start+0xfe>
			{

				// If button is not pressed
				LED_on(CAR_LED_YELLOW_PORT, CAR_LED_YELLOW_PIN);
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	0e 94 3f 02 	call	0x47e	; 0x47e <LED_on>
				TIMER_start();
 19a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TIMER_start>
				TIMER_stop();
 19e:	0e 94 9e 03 	call	0x73c	; 0x73c <TIMER_stop>
				LED_off(CAR_LED_YELLOW_PORT, CAR_LED_YELLOW_PIN);
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 43 02 	call	0x486	; 0x486 <LED_off>
				TIMER_start();
 1aa:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TIMER_start>
				TIMER_stop();
 1ae:	0e 94 9e 03 	call	0x73c	; 0x73c <TIMER_stop>
			LED_off(CAR_LED_RED_PORT, CAR_LED_RED_PIN);
			

/* ---------------------------------------------- STATE 2 ---------------------------------------------- */		
			current_state= 2; // CAR_LED_YELLOW IS ON
			for(index_i = 0; index_i < 10; index_i++)
 1b2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <index_i>
 1b6:	8f 5f       	subi	r24, 0xFF	; 255
 1b8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <index_i>
 1bc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <index_i>
 1c0:	8a 30       	cpi	r24, 0x0A	; 10
 1c2:	38 f3       	brcs	.-50     	; 0x192 <APP_start+0xd4>
				TIMER_stop();
				LED_off(CAR_LED_YELLOW_PORT, CAR_LED_YELLOW_PIN);
				TIMER_start();
				TIMER_stop();
			}
			LED_off(CAR_LED_YELLOW_PORT, CAR_LED_YELLOW_PIN);
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	0e 94 43 02 	call	0x486	; 0x486 <LED_off>
			LED_off(PEDSTRAIN_LED_GREEN_PORT, PEDSTRAIN_LED_GREEN_PIN);
 1cc:	62 e0       	ldi	r22, 0x02	; 2
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	0e 94 43 02 	call	0x486	; 0x486 <LED_off>
			
			
		APP_start();      // Returns to application start
 1d4:	0e 94 5f 00 	call	0xbe	; 0xbe <APP_start>
 1d8:	08 95       	ret

000001da <__vector_1>:
}

/* ------------------------------- ISR ------------------------------- */
ISR(INT0_vect)
{
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
 1e4:	2f 93       	push	r18
 1e6:	3f 93       	push	r19
 1e8:	4f 93       	push	r20
 1ea:	5f 93       	push	r21
 1ec:	6f 93       	push	r22
 1ee:	7f 93       	push	r23
 1f0:	8f 93       	push	r24
 1f2:	9f 93       	push	r25
 1f4:	af 93       	push	r26
 1f6:	bf 93       	push	r27
 1f8:	ef 93       	push	r30
 1fa:	ff 93       	push	r31
	button_state = BUTTON_PRESSED;
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <button_state>
	
	switch(current_state)
 202:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 206:	82 30       	cpi	r24, 0x02	; 2
 208:	09 f4       	brne	.+2      	; 0x20c <__vector_1+0x32>
 20a:	73 c0       	rjmp	.+230    	; 0x2f2 <__vector_1+0x118>
 20c:	83 30       	cpi	r24, 0x03	; 3
 20e:	09 f4       	brne	.+2      	; 0x212 <__vector_1+0x38>
 210:	d9 c0       	rjmp	.+434    	; 0x3c4 <__vector_1+0x1ea>
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	09 f0       	breq	.+2      	; 0x218 <__vector_1+0x3e>
 216:	1a c1       	rjmp	.+564    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
	{
		case 1: // Button was pressed when car_led_green was on
				LED_off(CAR_LED_GREEN_PORT, CAR_LED_GREEN_PIN);
 218:	62 e0       	ldi	r22, 0x02	; 2
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	0e 94 43 02 	call	0x486	; 0x486 <LED_off>
				for(index_i = 0; index_i < 20; index_i++)
 220:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <index_i>
 224:	11 c0       	rjmp	.+34     	; 0x248 <__vector_1+0x6e>
				{
					LED_toggle(CAR_LED_YELLOW_PORT, CAR_LED_YELLOW_PIN);
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	0e 94 47 02 	call	0x48e	; 0x48e <LED_toggle>
					LED_toggle(PEDSTRAIN_LED_YELLOW_PORT, PEDSTRAIN_LED_YELLOW_PIN);
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	0e 94 47 02 	call	0x48e	; 0x48e <LED_toggle>
					TIMER_start();
 236:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TIMER_start>
					TIMER_stop();
 23a:	0e 94 9e 03 	call	0x73c	; 0x73c <TIMER_stop>
	
	switch(current_state)
	{
		case 1: // Button was pressed when car_led_green was on
				LED_off(CAR_LED_GREEN_PORT, CAR_LED_GREEN_PIN);
				for(index_i = 0; index_i < 20; index_i++)
 23e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <index_i>
 242:	8f 5f       	subi	r24, 0xFF	; 255
 244:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <index_i>
 248:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <index_i>
 24c:	84 31       	cpi	r24, 0x14	; 20
 24e:	58 f3       	brcs	.-42     	; 0x226 <__vector_1+0x4c>
					LED_toggle(CAR_LED_YELLOW_PORT, CAR_LED_YELLOW_PIN);
					LED_toggle(PEDSTRAIN_LED_YELLOW_PORT, PEDSTRAIN_LED_YELLOW_PIN);
					TIMER_start();
					TIMER_stop();
				}
				LED_off(CAR_LED_YELLOW_PORT, CAR_LED_YELLOW_PIN);
 250:	61 e0       	ldi	r22, 0x01	; 1
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 43 02 	call	0x486	; 0x486 <LED_off>
				LED_off(PEDSTRAIN_LED_YELLOW_PORT, PEDSTRAIN_LED_YELLOW_PIN);
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	0e 94 43 02 	call	0x486	; 0x486 <LED_off>

				LED_off(PEDSTRAIN_LED_RED_PORT, PEDSTRAIN_LED_RED_PIN);
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 43 02 	call	0x486	; 0x486 <LED_off>
				LED_on(CAR_LED_RED_PORT, CAR_LED_RED_PIN);
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 3f 02 	call	0x47e	; 0x47e <LED_on>
				LED_on(PEDSTRAIN_LED_GREEN_PORT, PEDSTRAIN_LED_GREEN_PIN);
 270:	62 e0       	ldi	r22, 0x02	; 2
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 3f 02 	call	0x47e	; 0x47e <LED_on>
				for(index_i = 0; index_i < 20; index_i++)
 278:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <index_i>
 27c:	09 c0       	rjmp	.+18     	; 0x290 <__vector_1+0xb6>
				{
					TIMER_start();
 27e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TIMER_start>
					TIMER_stop();
 282:	0e 94 9e 03 	call	0x73c	; 0x73c <TIMER_stop>
				LED_off(PEDSTRAIN_LED_YELLOW_PORT, PEDSTRAIN_LED_YELLOW_PIN);

				LED_off(PEDSTRAIN_LED_RED_PORT, PEDSTRAIN_LED_RED_PIN);
				LED_on(CAR_LED_RED_PORT, CAR_LED_RED_PIN);
				LED_on(PEDSTRAIN_LED_GREEN_PORT, PEDSTRAIN_LED_GREEN_PIN);
				for(index_i = 0; index_i < 20; index_i++)
 286:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <index_i>
 28a:	8f 5f       	subi	r24, 0xFF	; 255
 28c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <index_i>
 290:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <index_i>
 294:	84 31       	cpi	r24, 0x14	; 20
 296:	98 f3       	brcs	.-26     	; 0x27e <__vector_1+0xa4>
				{
					TIMER_start();
					TIMER_stop();
				}
				LED_off(CAR_LED_RED_PORT, CAR_LED_RED_PIN);
 298:	60 e0       	ldi	r22, 0x00	; 0
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	0e 94 43 02 	call	0x486	; 0x486 <LED_off>

				for(index_i = 0; index_i < 20; index_i++)
 2a0:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <index_i>
 2a4:	11 c0       	rjmp	.+34     	; 0x2c8 <__vector_1+0xee>
				{
					LED_toggle(CAR_LED_YELLOW_PORT, CAR_LED_YELLOW_PIN);
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	0e 94 47 02 	call	0x48e	; 0x48e <LED_toggle>
					LED_toggle(PEDSTRAIN_LED_YELLOW_PORT, PEDSTRAIN_LED_YELLOW_PIN);
 2ae:	61 e0       	ldi	r22, 0x01	; 1
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 47 02 	call	0x48e	; 0x48e <LED_toggle>
					TIMER_start();
 2b6:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TIMER_start>
					TIMER_stop();
 2ba:	0e 94 9e 03 	call	0x73c	; 0x73c <TIMER_stop>
					TIMER_start();
					TIMER_stop();
				}
				LED_off(CAR_LED_RED_PORT, CAR_LED_RED_PIN);

				for(index_i = 0; index_i < 20; index_i++)
 2be:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <index_i>
 2c2:	8f 5f       	subi	r24, 0xFF	; 255
 2c4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <index_i>
 2c8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <index_i>
 2cc:	84 31       	cpi	r24, 0x14	; 20
 2ce:	58 f3       	brcs	.-42     	; 0x2a6 <__vector_1+0xcc>
					LED_toggle(CAR_LED_YELLOW_PORT, CAR_LED_YELLOW_PIN);
					LED_toggle(PEDSTRAIN_LED_YELLOW_PORT, PEDSTRAIN_LED_YELLOW_PIN);
					TIMER_start();
					TIMER_stop();
				}
				LED_off(CAR_LED_YELLOW_PORT, CAR_LED_YELLOW_PIN);
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	0e 94 43 02 	call	0x486	; 0x486 <LED_off>
				LED_off(PEDSTRAIN_LED_YELLOW_PORT, PEDSTRAIN_LED_YELLOW_PIN);
 2d8:	61 e0       	ldi	r22, 0x01	; 1
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	0e 94 43 02 	call	0x486	; 0x486 <LED_off>
				LED_off(PEDSTRAIN_LED_GREEN_PORT, PEDSTRAIN_LED_GREEN_PIN);
 2e0:	62 e0       	ldi	r22, 0x02	; 2
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 43 02 	call	0x486	; 0x486 <LED_off>

				button_state = BUTTON_NOT_PRESSED;  // Returns button state to initial (not pressed)
 2e8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <button_state>

				APP_start();      // Returns to application start
 2ec:	0e 94 5f 00 	call	0xbe	; 0xbe <APP_start>
		break;
 2f0:	ad c0       	rjmp	.+346    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
		
		case 2: // Button was pressed when car_led_yellow was on
			for(index_i = 0; index_i < 20; index_i++)
 2f2:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <index_i>
 2f6:	11 c0       	rjmp	.+34     	; 0x31a <__vector_1+0x140>
			{
				LED_toggle(CAR_LED_YELLOW_PORT, CAR_LED_YELLOW_PIN);
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 47 02 	call	0x48e	; 0x48e <LED_toggle>
				LED_toggle(PEDSTRAIN_LED_YELLOW_PORT, PEDSTRAIN_LED_YELLOW_PIN);
 300:	61 e0       	ldi	r22, 0x01	; 1
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 47 02 	call	0x48e	; 0x48e <LED_toggle>
				TIMER_start();
 308:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TIMER_start>
				TIMER_stop();
 30c:	0e 94 9e 03 	call	0x73c	; 0x73c <TIMER_stop>

				APP_start();      // Returns to application start
		break;
		
		case 2: // Button was pressed when car_led_yellow was on
			for(index_i = 0; index_i < 20; index_i++)
 310:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <index_i>
 314:	8f 5f       	subi	r24, 0xFF	; 255
 316:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <index_i>
 31a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <index_i>
 31e:	84 31       	cpi	r24, 0x14	; 20
 320:	58 f3       	brcs	.-42     	; 0x2f8 <__vector_1+0x11e>
				LED_toggle(CAR_LED_YELLOW_PORT, CAR_LED_YELLOW_PIN);
				LED_toggle(PEDSTRAIN_LED_YELLOW_PORT, PEDSTRAIN_LED_YELLOW_PIN);
				TIMER_start();
				TIMER_stop();
			}
			LED_off(CAR_LED_YELLOW_PORT, CAR_LED_YELLOW_PIN);
 322:	61 e0       	ldi	r22, 0x01	; 1
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	0e 94 43 02 	call	0x486	; 0x486 <LED_off>
			LED_off(PEDSTRAIN_LED_YELLOW_PORT, PEDSTRAIN_LED_YELLOW_PIN);
 32a:	61 e0       	ldi	r22, 0x01	; 1
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	0e 94 43 02 	call	0x486	; 0x486 <LED_off>

			LED_off(PEDSTRAIN_LED_RED_PORT, PEDSTRAIN_LED_RED_PIN);
 332:	60 e0       	ldi	r22, 0x00	; 0
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	0e 94 43 02 	call	0x486	; 0x486 <LED_off>
			LED_on(CAR_LED_RED_PORT, CAR_LED_RED_PIN);
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	0e 94 3f 02 	call	0x47e	; 0x47e <LED_on>
			LED_on(PEDSTRAIN_LED_GREEN_PORT, PEDSTRAIN_LED_GREEN_PIN);
 342:	62 e0       	ldi	r22, 0x02	; 2
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	0e 94 3f 02 	call	0x47e	; 0x47e <LED_on>
			
			for(index_i = 0; index_i < 20; index_i++)
 34a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <index_i>
 34e:	09 c0       	rjmp	.+18     	; 0x362 <__vector_1+0x188>
			{
				TIMER_start();
 350:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TIMER_start>
				TIMER_stop();
 354:	0e 94 9e 03 	call	0x73c	; 0x73c <TIMER_stop>

			LED_off(PEDSTRAIN_LED_RED_PORT, PEDSTRAIN_LED_RED_PIN);
			LED_on(CAR_LED_RED_PORT, CAR_LED_RED_PIN);
			LED_on(PEDSTRAIN_LED_GREEN_PORT, PEDSTRAIN_LED_GREEN_PIN);
			
			for(index_i = 0; index_i < 20; index_i++)
 358:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <index_i>
 35c:	8f 5f       	subi	r24, 0xFF	; 255
 35e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <index_i>
 362:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <index_i>
 366:	84 31       	cpi	r24, 0x14	; 20
 368:	98 f3       	brcs	.-26     	; 0x350 <__vector_1+0x176>
			{
				TIMER_start();
				TIMER_stop();
			}
			LED_on(CAR_LED_RED_PORT, CAR_LED_RED_PIN);
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	0e 94 3f 02 	call	0x47e	; 0x47e <LED_on>

			for(index_i = 0; index_i < 20; index_i++)
 372:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <index_i>
 376:	11 c0       	rjmp	.+34     	; 0x39a <__vector_1+0x1c0>
			{
				LED_toggle(CAR_LED_YELLOW_PORT, CAR_LED_YELLOW_PIN);
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	0e 94 47 02 	call	0x48e	; 0x48e <LED_toggle>
				LED_toggle(PEDSTRAIN_LED_YELLOW_PORT, PEDSTRAIN_LED_YELLOW_PIN);
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	0e 94 47 02 	call	0x48e	; 0x48e <LED_toggle>
				TIMER_start();
 388:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TIMER_start>
				TIMER_stop();
 38c:	0e 94 9e 03 	call	0x73c	; 0x73c <TIMER_stop>
				TIMER_start();
				TIMER_stop();
			}
			LED_on(CAR_LED_RED_PORT, CAR_LED_RED_PIN);

			for(index_i = 0; index_i < 20; index_i++)
 390:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <index_i>
 394:	8f 5f       	subi	r24, 0xFF	; 255
 396:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <index_i>
 39a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <index_i>
 39e:	84 31       	cpi	r24, 0x14	; 20
 3a0:	58 f3       	brcs	.-42     	; 0x378 <__vector_1+0x19e>
				LED_toggle(CAR_LED_YELLOW_PORT, CAR_LED_YELLOW_PIN);
				LED_toggle(PEDSTRAIN_LED_YELLOW_PORT, PEDSTRAIN_LED_YELLOW_PIN);
				TIMER_start();
				TIMER_stop();
			}
			LED_off(CAR_LED_YELLOW_PORT, CAR_LED_YELLOW_PIN);
 3a2:	61 e0       	ldi	r22, 0x01	; 1
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	0e 94 43 02 	call	0x486	; 0x486 <LED_off>
			LED_off(PEDSTRAIN_LED_YELLOW_PORT, PEDSTRAIN_LED_YELLOW_PIN);
 3aa:	61 e0       	ldi	r22, 0x01	; 1
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	0e 94 43 02 	call	0x486	; 0x486 <LED_off>
			LED_off(PEDSTRAIN_LED_GREEN_PORT, PEDSTRAIN_LED_GREEN_PIN);
 3b2:	62 e0       	ldi	r22, 0x02	; 2
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 43 02 	call	0x486	; 0x486 <LED_off>

			button_state = BUTTON_NOT_PRESSED;   // Returns button state to initial (not pressed)
 3ba:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <button_state>

			APP_start();      // Returns to application start
 3be:	0e 94 5f 00 	call	0xbe	; 0xbe <APP_start>
		break;
 3c2:	44 c0       	rjmp	.+136    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
		
		case 3: // Button was pressed when car_led_red was on
			LED_on(PEDSTRAIN_LED_GREEN_PORT, PEDSTRAIN_LED_GREEN_PIN);
 3c4:	62 e0       	ldi	r22, 0x02	; 2
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 3f 02 	call	0x47e	; 0x47e <LED_on>
			for(index_i = 0; index_i < 20; index_i++)
 3cc:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <index_i>
 3d0:	09 c0       	rjmp	.+18     	; 0x3e4 <__vector_1+0x20a>
			{
				TIMER_start();
 3d2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TIMER_start>
				TIMER_stop();
 3d6:	0e 94 9e 03 	call	0x73c	; 0x73c <TIMER_stop>
			APP_start();      // Returns to application start
		break;
		
		case 3: // Button was pressed when car_led_red was on
			LED_on(PEDSTRAIN_LED_GREEN_PORT, PEDSTRAIN_LED_GREEN_PIN);
			for(index_i = 0; index_i < 20; index_i++)
 3da:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <index_i>
 3de:	8f 5f       	subi	r24, 0xFF	; 255
 3e0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <index_i>
 3e4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <index_i>
 3e8:	84 31       	cpi	r24, 0x14	; 20
 3ea:	98 f3       	brcs	.-26     	; 0x3d2 <__vector_1+0x1f8>
			{
				TIMER_start();
				TIMER_stop();
			}
			LED_off(CAR_LED_RED_PORT, CAR_LED_RED_PIN);
 3ec:	60 e0       	ldi	r22, 0x00	; 0
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	0e 94 43 02 	call	0x486	; 0x486 <LED_off>
			LED_off(PEDSTRAIN_LED_RED_PORT, PEDSTRAIN_LED_RED_PIN);
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	0e 94 43 02 	call	0x486	; 0x486 <LED_off>

			for(index_i = 0; index_i < 20; index_i++)
 3fc:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <index_i>
 400:	11 c0       	rjmp	.+34     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
			{
				LED_toggle(CAR_LED_YELLOW_PORT, CAR_LED_YELLOW_PIN);
 402:	61 e0       	ldi	r22, 0x01	; 1
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	0e 94 47 02 	call	0x48e	; 0x48e <LED_toggle>
				LED_toggle(PEDSTRAIN_LED_YELLOW_PORT, PEDSTRAIN_LED_YELLOW_PIN);
 40a:	61 e0       	ldi	r22, 0x01	; 1
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	0e 94 47 02 	call	0x48e	; 0x48e <LED_toggle>
				TIMER_start();
 412:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TIMER_start>
				TIMER_stop();
 416:	0e 94 9e 03 	call	0x73c	; 0x73c <TIMER_stop>
				TIMER_stop();
			}
			LED_off(CAR_LED_RED_PORT, CAR_LED_RED_PIN);
			LED_off(PEDSTRAIN_LED_RED_PORT, PEDSTRAIN_LED_RED_PIN);

			for(index_i = 0; index_i < 20; index_i++)
 41a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <index_i>
 41e:	8f 5f       	subi	r24, 0xFF	; 255
 420:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <index_i>
 424:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <index_i>
 428:	84 31       	cpi	r24, 0x14	; 20
 42a:	58 f3       	brcs	.-42     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
				LED_toggle(CAR_LED_YELLOW_PORT, CAR_LED_YELLOW_PIN);
				LED_toggle(PEDSTRAIN_LED_YELLOW_PORT, PEDSTRAIN_LED_YELLOW_PIN);
				TIMER_start();
				TIMER_stop();
			}
			LED_off(CAR_LED_YELLOW_PORT, CAR_LED_YELLOW_PIN);
 42c:	61 e0       	ldi	r22, 0x01	; 1
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	0e 94 43 02 	call	0x486	; 0x486 <LED_off>
			LED_off(PEDSTRAIN_LED_YELLOW_PORT, PEDSTRAIN_LED_YELLOW_PIN);
 434:	61 e0       	ldi	r22, 0x01	; 1
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	0e 94 43 02 	call	0x486	; 0x486 <LED_off>
			LED_off(PEDSTRAIN_LED_GREEN_PORT, PEDSTRAIN_LED_GREEN_PIN);
 43c:	62 e0       	ldi	r22, 0x02	; 2
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	0e 94 43 02 	call	0x486	; 0x486 <LED_off>

			button_state = BUTTON_NOT_PRESSED;  // Returns button state to initial (not pressed)
 444:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <button_state>

			APP_start();      // Returns to application start
 448:	0e 94 5f 00 	call	0xbe	; 0xbe <APP_start>
		break;

	}		
}
 44c:	ff 91       	pop	r31
 44e:	ef 91       	pop	r30
 450:	bf 91       	pop	r27
 452:	af 91       	pop	r26
 454:	9f 91       	pop	r25
 456:	8f 91       	pop	r24
 458:	7f 91       	pop	r23
 45a:	6f 91       	pop	r22
 45c:	5f 91       	pop	r21
 45e:	4f 91       	pop	r20
 460:	3f 91       	pop	r19
 462:	2f 91       	pop	r18
 464:	0f 90       	pop	r0
 466:	0f be       	out	0x3f, r0	; 63
 468:	0f 90       	pop	r0
 46a:	1f 90       	pop	r1
 46c:	18 95       	reti

0000046e <BUTTON_init>:

#include "button.h"

void BUTTON_init(DIO_PORT_ID portNumber, DIO_PIN_ID pinNumber)
{
	DIO_init(portNumber, pinNumber, INPUT);
 46e:	40 e0       	ldi	r20, 0x00	; 0
 470:	0e 94 51 02 	call	0x4a2	; 0x4a2 <DIO_init>
 474:	08 95       	ret

00000476 <LED_init>:
#include "led.h"


void LED_init(DIO_PORT_ID portNumber, DIO_PIN_ID pinNumber)
{
	DIO_init(portNumber, pinNumber, OUTPUT);
 476:	41 e0       	ldi	r20, 0x01	; 1
 478:	0e 94 51 02 	call	0x4a2	; 0x4a2 <DIO_init>
 47c:	08 95       	ret

0000047e <LED_on>:
}

void LED_on(DIO_PORT_ID portNumber, DIO_PIN_ID pinNumber)
{
	DIO_write(portNumber, pinNumber, HIGH);
 47e:	41 e0       	ldi	r20, 0x01	; 1
 480:	0e 94 c8 02 	call	0x590	; 0x590 <DIO_write>
 484:	08 95       	ret

00000486 <LED_off>:
}

void LED_off(DIO_PORT_ID portNumber, DIO_PIN_ID pinNumber)
{
	DIO_write(portNumber, pinNumber, LOW);
 486:	40 e0       	ldi	r20, 0x00	; 0
 488:	0e 94 c8 02 	call	0x590	; 0x590 <DIO_write>
 48c:	08 95       	ret

0000048e <LED_toggle>:
}

void LED_toggle(DIO_PORT_ID portNumber, DIO_PIN_ID pinNumber)
{
	DIO_toggle(portNumber, pinNumber);
 48e:	0e 94 3f 03 	call	0x67e	; 0x67e <DIO_toggle>
 492:	08 95       	ret

00000494 <main>:

#define TEST_CASE 1

int main(void)
{
	APP_init();
 494:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_init>
	APP_start();
 498:	0e 94 5f 00 	call	0xbe	; 0xbe <APP_start>
}
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	08 95       	ret

000004a2 <DIO_init>:
 */ 
#include "dio.h"

void DIO_init(DIO_PORT_ID portNumber, DIO_PIN_ID pinNumber, DIO_Direction direction)
{
	switch(portNumber)
 4a2:	81 30       	cpi	r24, 0x01	; 1
 4a4:	19 f1       	breq	.+70     	; 0x4ec <DIO_init+0x4a>
 4a6:	30 f0       	brcs	.+12     	; 0x4b4 <DIO_init+0x12>
 4a8:	82 30       	cpi	r24, 0x02	; 2
 4aa:	e1 f1       	breq	.+120    	; 0x524 <DIO_init+0x82>
 4ac:	83 30       	cpi	r24, 0x03	; 3
 4ae:	09 f4       	brne	.+2      	; 0x4b2 <DIO_init+0x10>
 4b0:	54 c0       	rjmp	.+168    	; 0x55a <DIO_init+0xb8>
 4b2:	08 95       	ret
	{
		case PORT_A:
			if(INPUT == direction)
 4b4:	41 11       	cpse	r20, r1
 4b6:	0c c0       	rjmp	.+24     	; 0x4d0 <DIO_init+0x2e>
			{
				CLEAR_BIT(DDRA, pinNumber);
 4b8:	2a b3       	in	r18, 0x1a	; 26
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <DIO_init+0x22>
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	6a 95       	dec	r22
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <DIO_init+0x1e>
 4c8:	80 95       	com	r24
 4ca:	82 23       	and	r24, r18
 4cc:	8a bb       	out	0x1a, r24	; 26
 4ce:	08 95       	ret
			}
			else if(OUTPUT == direction)
 4d0:	41 30       	cpi	r20, 0x01	; 1
 4d2:	09 f0       	breq	.+2      	; 0x4d6 <DIO_init+0x34>
 4d4:	5c c0       	rjmp	.+184    	; 0x58e <DIO_init+0xec>
			{
				SET_BIT(DDRA, pinNumber);
 4d6:	2a b3       	in	r18, 0x1a	; 26
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <DIO_init+0x40>
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	6a 95       	dec	r22
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <DIO_init+0x3c>
 4e6:	82 2b       	or	r24, r18
 4e8:	8a bb       	out	0x1a, r24	; 26
 4ea:	08 95       	ret
			}
		break;
		
		case PORT_B:
			if(INPUT == direction)
 4ec:	41 11       	cpse	r20, r1
 4ee:	0c c0       	rjmp	.+24     	; 0x508 <DIO_init+0x66>
			{
				CLEAR_BIT(DDRB, pinNumber);
 4f0:	27 b3       	in	r18, 0x17	; 23
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <DIO_init+0x5a>
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	6a 95       	dec	r22
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <DIO_init+0x56>
 500:	80 95       	com	r24
 502:	82 23       	and	r24, r18
 504:	87 bb       	out	0x17, r24	; 23
 506:	08 95       	ret
			}
			else if(OUTPUT == direction)
 508:	41 30       	cpi	r20, 0x01	; 1
 50a:	09 f0       	breq	.+2      	; 0x50e <DIO_init+0x6c>
 50c:	40 c0       	rjmp	.+128    	; 0x58e <DIO_init+0xec>
			{
				SET_BIT(DDRB, pinNumber);
 50e:	27 b3       	in	r18, 0x17	; 23
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_init+0x78>
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	6a 95       	dec	r22
 51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_init+0x74>
 51e:	82 2b       	or	r24, r18
 520:	87 bb       	out	0x17, r24	; 23
 522:	08 95       	ret
			}
		break;
		
		case PORT_C:
			if(INPUT == direction)
 524:	41 11       	cpse	r20, r1
 526:	0c c0       	rjmp	.+24     	; 0x540 <DIO_init+0x9e>
			{
				CLEAR_BIT(DDRC, pinNumber);
 528:	24 b3       	in	r18, 0x14	; 20
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_init+0x92>
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	6a 95       	dec	r22
 536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_init+0x8e>
 538:	80 95       	com	r24
 53a:	82 23       	and	r24, r18
 53c:	84 bb       	out	0x14, r24	; 20
 53e:	08 95       	ret
			}
			else if(OUTPUT == direction)
 540:	41 30       	cpi	r20, 0x01	; 1
 542:	29 f5       	brne	.+74     	; 0x58e <DIO_init+0xec>
			{
				SET_BIT(DDRC, pinNumber);
 544:	24 b3       	in	r18, 0x14	; 20
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	02 c0       	rjmp	.+4      	; 0x550 <DIO_init+0xae>
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	6a 95       	dec	r22
 552:	e2 f7       	brpl	.-8      	; 0x54c <DIO_init+0xaa>
 554:	82 2b       	or	r24, r18
 556:	84 bb       	out	0x14, r24	; 20
 558:	08 95       	ret
			}
		break;
		
		case PORT_D:
			if(INPUT == direction)
 55a:	41 11       	cpse	r20, r1
 55c:	0c c0       	rjmp	.+24     	; 0x576 <DIO_init+0xd4>
			{
				CLEAR_BIT(DDRD, pinNumber);
 55e:	21 b3       	in	r18, 0x11	; 17
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	02 c0       	rjmp	.+4      	; 0x56a <DIO_init+0xc8>
 566:	88 0f       	add	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	6a 95       	dec	r22
 56c:	e2 f7       	brpl	.-8      	; 0x566 <DIO_init+0xc4>
 56e:	80 95       	com	r24
 570:	82 23       	and	r24, r18
 572:	81 bb       	out	0x11, r24	; 17
 574:	08 95       	ret
			}
			else if(OUTPUT == direction)
 576:	41 30       	cpi	r20, 0x01	; 1
 578:	51 f4       	brne	.+20     	; 0x58e <DIO_init+0xec>
			{
				SET_BIT(DDRD, pinNumber);
 57a:	21 b3       	in	r18, 0x11	; 17
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	02 c0       	rjmp	.+4      	; 0x586 <DIO_init+0xe4>
 582:	88 0f       	add	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	6a 95       	dec	r22
 588:	e2 f7       	brpl	.-8      	; 0x582 <DIO_init+0xe0>
 58a:	82 2b       	or	r24, r18
 58c:	81 bb       	out	0x11, r24	; 17
 58e:	08 95       	ret

00000590 <DIO_write>:
	}
}                     

void DIO_write(DIO_PORT_ID portNumber, DIO_PIN_ID pinNumber, DIO_Value value)
{
	switch(portNumber)
 590:	81 30       	cpi	r24, 0x01	; 1
 592:	19 f1       	breq	.+70     	; 0x5da <DIO_write+0x4a>
 594:	30 f0       	brcs	.+12     	; 0x5a2 <DIO_write+0x12>
 596:	82 30       	cpi	r24, 0x02	; 2
 598:	e1 f1       	breq	.+120    	; 0x612 <DIO_write+0x82>
 59a:	83 30       	cpi	r24, 0x03	; 3
 59c:	09 f4       	brne	.+2      	; 0x5a0 <DIO_write+0x10>
 59e:	54 c0       	rjmp	.+168    	; 0x648 <DIO_write+0xb8>
 5a0:	08 95       	ret
	{
		case PORT_A:
		if(LOW == value)
 5a2:	41 11       	cpse	r20, r1
 5a4:	0c c0       	rjmp	.+24     	; 0x5be <DIO_write+0x2e>
		{
			CLEAR_BIT(PORTA, pinNumber);
 5a6:	2b b3       	in	r18, 0x1b	; 27
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_write+0x22>
 5ae:	88 0f       	add	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	6a 95       	dec	r22
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <DIO_write+0x1e>
 5b6:	80 95       	com	r24
 5b8:	82 23       	and	r24, r18
 5ba:	8b bb       	out	0x1b, r24	; 27
 5bc:	08 95       	ret
		}
		else if(HIGH == value)
 5be:	41 30       	cpi	r20, 0x01	; 1
 5c0:	09 f0       	breq	.+2      	; 0x5c4 <DIO_write+0x34>
 5c2:	5c c0       	rjmp	.+184    	; 0x67c <DIO_write+0xec>
		{
			SET_BIT(PORTA, pinNumber);
 5c4:	2b b3       	in	r18, 0x1b	; 27
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <DIO_write+0x40>
 5cc:	88 0f       	add	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	6a 95       	dec	r22
 5d2:	e2 f7       	brpl	.-8      	; 0x5cc <DIO_write+0x3c>
 5d4:	82 2b       	or	r24, r18
 5d6:	8b bb       	out	0x1b, r24	; 27
 5d8:	08 95       	ret
		}
		break;
		
		case PORT_B:
			if(LOW == value)
 5da:	41 11       	cpse	r20, r1
 5dc:	0c c0       	rjmp	.+24     	; 0x5f6 <DIO_write+0x66>
			{
				CLEAR_BIT(PORTB, pinNumber);
 5de:	28 b3       	in	r18, 0x18	; 24
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <DIO_write+0x5a>
 5e6:	88 0f       	add	r24, r24
 5e8:	99 1f       	adc	r25, r25
 5ea:	6a 95       	dec	r22
 5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <DIO_write+0x56>
 5ee:	80 95       	com	r24
 5f0:	82 23       	and	r24, r18
 5f2:	88 bb       	out	0x18, r24	; 24
 5f4:	08 95       	ret
			}
			else if(HIGH == value)
 5f6:	41 30       	cpi	r20, 0x01	; 1
 5f8:	09 f0       	breq	.+2      	; 0x5fc <DIO_write+0x6c>
 5fa:	40 c0       	rjmp	.+128    	; 0x67c <DIO_write+0xec>
			{
				SET_BIT(PORTB, pinNumber);
 5fc:	28 b3       	in	r18, 0x18	; 24
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	02 c0       	rjmp	.+4      	; 0x608 <DIO_write+0x78>
 604:	88 0f       	add	r24, r24
 606:	99 1f       	adc	r25, r25
 608:	6a 95       	dec	r22
 60a:	e2 f7       	brpl	.-8      	; 0x604 <DIO_write+0x74>
 60c:	82 2b       	or	r24, r18
 60e:	88 bb       	out	0x18, r24	; 24
 610:	08 95       	ret
			}
		break;
		
		case PORT_C:
			if(LOW == value)
 612:	41 11       	cpse	r20, r1
 614:	0c c0       	rjmp	.+24     	; 0x62e <DIO_write+0x9e>
			{
				CLEAR_BIT(PORTC, pinNumber);
 616:	25 b3       	in	r18, 0x15	; 21
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	02 c0       	rjmp	.+4      	; 0x622 <DIO_write+0x92>
 61e:	88 0f       	add	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	6a 95       	dec	r22
 624:	e2 f7       	brpl	.-8      	; 0x61e <DIO_write+0x8e>
 626:	80 95       	com	r24
 628:	82 23       	and	r24, r18
 62a:	85 bb       	out	0x15, r24	; 21
 62c:	08 95       	ret
			}
			else if(HIGH == value)
 62e:	41 30       	cpi	r20, 0x01	; 1
 630:	29 f5       	brne	.+74     	; 0x67c <DIO_write+0xec>
			{
				SET_BIT(PORTC, pinNumber);
 632:	25 b3       	in	r18, 0x15	; 21
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	02 c0       	rjmp	.+4      	; 0x63e <DIO_write+0xae>
 63a:	88 0f       	add	r24, r24
 63c:	99 1f       	adc	r25, r25
 63e:	6a 95       	dec	r22
 640:	e2 f7       	brpl	.-8      	; 0x63a <DIO_write+0xaa>
 642:	82 2b       	or	r24, r18
 644:	85 bb       	out	0x15, r24	; 21
 646:	08 95       	ret
			}
		break;
		
		case PORT_D:
			if(LOW == value)
 648:	41 11       	cpse	r20, r1
 64a:	0c c0       	rjmp	.+24     	; 0x664 <DIO_write+0xd4>
			{
				CLEAR_BIT(PORTD, pinNumber);
 64c:	22 b3       	in	r18, 0x12	; 18
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	02 c0       	rjmp	.+4      	; 0x658 <DIO_write+0xc8>
 654:	88 0f       	add	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	6a 95       	dec	r22
 65a:	e2 f7       	brpl	.-8      	; 0x654 <DIO_write+0xc4>
 65c:	80 95       	com	r24
 65e:	82 23       	and	r24, r18
 660:	82 bb       	out	0x12, r24	; 18
 662:	08 95       	ret
			}
			else if(HIGH == value)
 664:	41 30       	cpi	r20, 0x01	; 1
 666:	51 f4       	brne	.+20     	; 0x67c <DIO_write+0xec>
			{
				SET_BIT(PORTD, pinNumber);
 668:	22 b3       	in	r18, 0x12	; 18
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	02 c0       	rjmp	.+4      	; 0x674 <DIO_write+0xe4>
 670:	88 0f       	add	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	6a 95       	dec	r22
 676:	e2 f7       	brpl	.-8      	; 0x670 <DIO_write+0xe0>
 678:	82 2b       	or	r24, r18
 67a:	82 bb       	out	0x12, r24	; 18
 67c:	08 95       	ret

0000067e <DIO_toggle>:
	}
}                           

void DIO_toggle(DIO_PORT_ID portNumber, DIO_PIN_ID pinNumber)
{
	switch(portNumber)
 67e:	81 30       	cpi	r24, 0x01	; 1
 680:	89 f0       	breq	.+34     	; 0x6a4 <DIO_toggle+0x26>
 682:	28 f0       	brcs	.+10     	; 0x68e <DIO_toggle+0x10>
 684:	82 30       	cpi	r24, 0x02	; 2
 686:	c9 f0       	breq	.+50     	; 0x6ba <DIO_toggle+0x3c>
 688:	83 30       	cpi	r24, 0x03	; 3
 68a:	11 f1       	breq	.+68     	; 0x6d0 <DIO_toggle+0x52>
 68c:	08 95       	ret
	{
		case PORT_A:
			TOGGLE_BIT(PORTA, pinNumber);
 68e:	2b b3       	in	r18, 0x1b	; 27
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	02 c0       	rjmp	.+4      	; 0x69a <DIO_toggle+0x1c>
 696:	88 0f       	add	r24, r24
 698:	99 1f       	adc	r25, r25
 69a:	6a 95       	dec	r22
 69c:	e2 f7       	brpl	.-8      	; 0x696 <DIO_toggle+0x18>
 69e:	82 27       	eor	r24, r18
 6a0:	8b bb       	out	0x1b, r24	; 27
		break;
 6a2:	08 95       	ret
		
		case PORT_B:
			TOGGLE_BIT(PORTB, pinNumber);
 6a4:	28 b3       	in	r18, 0x18	; 24
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <DIO_toggle+0x32>
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	6a 95       	dec	r22
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <DIO_toggle+0x2e>
 6b4:	82 27       	eor	r24, r18
 6b6:	88 bb       	out	0x18, r24	; 24
		break;
 6b8:	08 95       	ret
		
		case PORT_C:
			TOGGLE_BIT(PORTC, pinNumber);
 6ba:	25 b3       	in	r18, 0x15	; 21
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <DIO_toggle+0x48>
 6c2:	88 0f       	add	r24, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	6a 95       	dec	r22
 6c8:	e2 f7       	brpl	.-8      	; 0x6c2 <DIO_toggle+0x44>
 6ca:	82 27       	eor	r24, r18
 6cc:	85 bb       	out	0x15, r24	; 21
		break;
 6ce:	08 95       	ret
		
		case PORT_D:
			TOGGLE_BIT(PORTD, pinNumber);
 6d0:	22 b3       	in	r18, 0x12	; 18
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	02 c0       	rjmp	.+4      	; 0x6dc <DIO_toggle+0x5e>
 6d8:	88 0f       	add	r24, r24
 6da:	99 1f       	adc	r25, r25
 6dc:	6a 95       	dec	r22
 6de:	e2 f7       	brpl	.-8      	; 0x6d8 <DIO_toggle+0x5a>
 6e0:	82 27       	eor	r24, r18
 6e2:	82 bb       	out	0x12, r24	; 18
 6e4:	08 95       	ret

000006e6 <INTERRRUPT_init>:


void INTERRRUPT_init(void)
{	
	/* Enable global interrupts -> setting bit 7 in the status register to 1 */
	sei();
 6e6:	78 94       	sei
	
	/* Choose the external interrupt sense - sense on rising edge */
	MCUCR |= (1 << ISC00) | (1 << ISC01);
 6e8:	85 b7       	in	r24, 0x35	; 53
 6ea:	83 60       	ori	r24, 0x03	; 3
 6ec:	85 bf       	out	0x35, r24	; 53
	
	/* Enable external interrupt0 - INT0 */
	GICR |= (1 << INT0);
 6ee:	8b b7       	in	r24, 0x3b	; 59
 6f0:	80 64       	ori	r24, 0x40	; 64
 6f2:	8b bf       	out	0x3b, r24	; 59
 6f4:	08 95       	ret

000006f6 <TIMER_init>:

uint32_t_m overflow_counter= 0;

void TIMER_init(void)
{
	TCCR0= 0x00;   // Normal mode
 6f6:	13 be       	out	0x33, r1	; 51
	
	// Set timer initial value
	TCNT0= 6; 
 6f8:	86 e0       	ldi	r24, 0x06	; 6
 6fa:	82 bf       	out	0x32, r24	; 50
 6fc:	08 95       	ret

000006fe <TIMER_start>:
}

void TIMER_start(void)
{
		SET_BIT(TCCR0, CS00);    // No prescale
 6fe:	83 b7       	in	r24, 0x33	; 51
 700:	81 60       	ori	r24, 0x01	; 1
 702:	83 bf       	out	0x33, r24	; 51
		
		while(NUMBER_0F_OVERFLOWS > overflow_counter)
 704:	0f c0       	rjmp	.+30     	; 0x724 <TIMER_start+0x26>
		{
			// Will be repeated 1000 times
			while((TIFR & (1 << 0)) == 0);
 706:	08 b6       	in	r0, 0x38	; 56
 708:	00 fe       	sbrs	r0, 0
 70a:	fd cf       	rjmp	.-6      	; 0x706 <TIMER_start+0x8>
			
			// Clear overflow flag
			SET_BIT(TIFR, TOV0);
 70c:	88 b7       	in	r24, 0x38	; 56
 70e:	81 60       	ori	r24, 0x01	; 1
 710:	88 bf       	out	0x38, r24	; 56
			
			overflow_counter++;
 712:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <overflow_counter>
 716:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <overflow_counter+0x1>
 71a:	01 96       	adiw	r24, 0x01	; 1
 71c:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <overflow_counter+0x1>
 720:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <overflow_counter>

void TIMER_start(void)
{
		SET_BIT(TCCR0, CS00);    // No prescale
		
		while(NUMBER_0F_OVERFLOWS > overflow_counter)
 724:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <overflow_counter>
 728:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <overflow_counter+0x1>
 72c:	88 3e       	cpi	r24, 0xE8	; 232
 72e:	93 40       	sbci	r25, 0x03	; 3
 730:	50 f3       	brcs	.-44     	; 0x706 <TIMER_start+0x8>
			// Clear overflow flag
			SET_BIT(TIFR, TOV0);
			
			overflow_counter++;
		}
		overflow_counter= 0;
 732:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <overflow_counter+0x1>
 736:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <overflow_counter>
 73a:	08 95       	ret

0000073c <TIMER_stop>:
}

void TIMER_stop(void)
{	
	TCCR0= 0x00;
 73c:	13 be       	out	0x33, r1	; 51
 73e:	08 95       	ret

00000740 <_exit>:
 740:	f8 94       	cli

00000742 <__stop_program>:
 742:	ff cf       	rjmp	.-2      	; 0x742 <__stop_program>
